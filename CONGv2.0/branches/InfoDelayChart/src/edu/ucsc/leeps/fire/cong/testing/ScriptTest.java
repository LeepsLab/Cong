/*
 * ScriptTest.java
 *
 * Created on Sep 27, 2011, 11:53:53 AM
 */
package edu.ucsc.leeps.fire.cong.testing;

import compiler.CharSequenceCompiler;
import edu.ucsc.leeps.fire.cong.server.PayoffFunction;
import edu.ucsc.leeps.fire.cong.server.ScriptedPayoffFunction;
import edu.ucsc.leeps.fire.cong.server.SumPayoffFunction;
import edu.ucsc.leeps.fire.logging.Dialogs;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.AbstractTableModel;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;

/**
 *
 * @author jpettit
 */
public class ScriptTest extends javax.swing.JFrame {

    private File loaded;
    private StrategyTableModel strategyTableModel;
    private CharSequenceCompiler<PayoffFunction> compiler;

    /** Creates new form ScriptTest */
    public ScriptTest() {
        compiler = new CharSequenceCompiler<PayoffFunction>(
                getClass().getClassLoader(), Arrays.asList(new String[]{"-target", "1.5"}));
        initComponents();
        strategyTableModel = new StrategyTableModel();
        strategyTable.setModel(strategyTableModel);
        playerCount.setValue(1);
        strategyCount.setValue(1);
        System.setErr(new PrintStream(new OutputStream() {

            @Override
            public void write(int i) throws IOException {
                logTextArea.setText(logTextArea.getText() + (char) i);
            }
        }));
        scriptEditor.setContentType("text/x-java-source");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptEditor = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        strategyTable = new javax.swing.JTable();
        playerCount = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        strategyCount = new javax.swing.JSpinner();
        reloadButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(scriptEditor);

        strategyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Player", "Strategy 1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(strategyTable);
        strategyTable.getColumnModel().getColumn(0).setResizable(false);

        playerCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                playerCountStateChanged(evt);
            }
        });

        jLabel1.setText("Players:");

        jLabel2.setText("Strategies:");

        strategyCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                strategyCountStateChanged(evt);
            }
        });

        reloadButton.setText("Reload");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        logTextArea.setColumns(20);
        logTextArea.setEditable(false);
        logTextArea.setRows(5);
        jScrollPane3.setViewportView(logTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(8, 8, 8)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(strategyCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(88, 88, 88))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(reloadButton)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(playerCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(strategyCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reloadButton)
                .addContainerGap())
        );

        fileMenu.setText("File");

        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playerCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_playerCountStateChanged
        int players = Integer.parseInt(playerCount.getValue().toString());
        while (players > strategyTableModel.strategies.size()) {
            int player = strategyTableModel.strategies.size() + 1;
            float[] strategy = new float[strategyTableModel.getColumnCount() - 1];
            strategyTableModel.strategies.put(player, strategy);
        }
        while (players < strategyTableModel.strategies.size()) {
            strategyTableModel.strategies.remove(strategyTableModel.strategies.size());
        }
        strategyTableModel.fireTableDataChanged();
    }//GEN-LAST:event_playerCountStateChanged

    private void strategyCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_strategyCountStateChanged
        int strategies = Integer.parseInt(strategyCount.getValue().toString());
        for (int id : strategyTableModel.strategies.keySet()) {
            strategyTableModel.strategies.put(id, new float[strategies]);
        }
        strategyTableModel.fireTableStructureChanged();
    }//GEN-LAST:event_strategyCountStateChanged

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        ScriptedPayoffFunction p1 = new ScriptedPayoffFunction();
        List<Diagnostic<? extends JavaFileObject>> errs = p1.setScript(scriptEditor.getText());
        if (!errs.isEmpty()) {
            for (Diagnostic<? extends JavaFileObject> d : errs) {
                System.err.println(d.toString());
            }
            return;
        }
        SumPayoffFunction p2 = new SumPayoffFunction();
        p2.type = SumPayoffFunction.Type.linear;
        System.err.println("payoff = " + p1.getPayoff(1, 0, strategyTableModel.strategies, strategyTableModel.strategies, null));
        long start = System.nanoTime();
        for (int i = 0; i < 10000; i++) {
            p1.getPayoff(1, 0, strategyTableModel.strategies, strategyTableModel.strategies, null);
        }
        double seconds = (System.nanoTime() - start) / 1e9;
        double msPerEx = ((System.nanoTime() - start) / 1e6) / 10000;
        System.err.printf("10000 executions in %.0f seconds, %.2f ms each\n", seconds, msPerEx);
        start = System.nanoTime();
        for (int i = 0; i < 10000; i++) {
            p2.getPayoff(1, 0, strategyTableModel.strategies, strategyTableModel.strategies, null);
        }
        seconds = (System.nanoTime() - start) / 1e9;
        msPerEx = ((System.nanoTime() - start) / 1e6) / 10000;
        System.err.printf("10000 executions in %.0f seconds, %.2f ms each\n", seconds, msPerEx);
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getName().endsWith("java");
            }

            @Override
            public String getDescription() {
                return "Java Source";
            }
        });
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            try {
                scriptEditor.setText(readAll(fc.getSelectedFile()));
                loaded = fc.getSelectedFile();
            } catch (IOException ex) {
                Dialogs.popUpErr("Error reading script file");
            }
        }
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        JFileChooser fc = new JFileChooser(loaded);
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getName().endsWith("java");
            }

            @Override
            public String getDescription() {
                return "Java Source";
            }
        });
        int r = fc.showSaveDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File selected = fc.getSelectedFile();
            try {
                FileWriter f = new FileWriter(selected);
                f.write(scriptEditor.getText());
                f.close();
            } catch (IOException ex) {
                Dialogs.popUpErr("Error writing script file");
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private class StrategyTableModel extends AbstractTableModel {

        private Map<Integer, float[]> strategies;

        public StrategyTableModel() {
            strategies = new HashMap<Integer, float[]>();
            strategies.put(1, new float[1]);
        }

        public int getRowCount() {
            return strategies.size();
        }

        public int getColumnCount() {
            return strategies.get(1).length + 1;
        }

        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return row + 1;
            }
            return strategies.get(row + 1)[col - 1];
        }

        @Override
        public String getColumnName(int col) {
            if (col == 0) {
                return "Player";
            }
            return "S" + String.valueOf(col);
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col > 0;
        }

        @Override
        public void setValueAt(Object o, int row, int col) {
            try {
                float f = Float.parseFloat(o.toString());
                strategies.get(row + 1)[col - 1] = f;
            } catch (NumberFormatException ex) {
            }
        }
    }

    private static String readAll(File f) throws java.io.IOException {
        byte[] buffer = new byte[(int) f.length()];
        BufferedInputStream s = new BufferedInputStream(new FileInputStream(f));
        s.read(buffer);
        return new String(buffer);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScriptTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScriptTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScriptTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScriptTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ScriptTest().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSpinner playerCount;
    private javax.swing.JButton reloadButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JEditorPane scriptEditor;
    private javax.swing.JSpinner strategyCount;
    private javax.swing.JTable strategyTable;
    // End of variables declaration//GEN-END:variables
}
