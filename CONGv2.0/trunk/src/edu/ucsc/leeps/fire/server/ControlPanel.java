/**
 * Copyright (c) 2012, University of California
 * All rights reserved.
 * 
 * Redistribution and use is governed by the LICENSE.txt file included with this
 * source code and available at http://leeps.ucsc.edu/cong/wiki/license
 **/

package edu.ucsc.leeps.fire.server;

import edu.ucsc.leeps.fire.config.BaseConfig;
import edu.ucsc.leeps.fire.logging.Dialogs;
import edu.ucsc.leeps.fire.reflection.ObjectMapper;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import javax.swing.*;

/**
 *
 * @author jpettit
 */
public class ControlPanel extends javax.swing.JPanel {

    private ServerController controller;
    private Timer timer;
    private Map<Integer, LocalClient> clients;
    private AutostartTask autostartTask;
    private CountdownTask countdownTask;

    public ControlPanel(ServerController controller) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.err.println("Unable to change look and feel");
        }
        this.controller = controller;
        initComponents();
        showUpField.setValue(5f);
        thresholdField.setValue(0f);
        conversionRateField.setValue(1f);
        timer = new Timer();
        new File("payouts.csv").delete();
    }

    public void setClients(Map<Integer, LocalClient> clients) {
        this.clients = clients;
        clientList.setListData(new Vector(clients.values()));
    }

    public void clientsChanged() {
        clientList.setListData(new Vector(clients.values()));
    }

    public void periodStarted(String period, int length) {
        startPeriodButton.setText("End Period");
        periodSelector.setValue(period);
        countdownTask = new CountdownTask(length);
        timer.scheduleAtFixedRate(countdownTask, 0, 1000);
    }

    public void periodEnded(String period) {
        if (countdownTask != null) {
            countdownTask.cancel();
        }
        savePayouts();
        String next = (String) periodSelector.getNextValue();
        if (next != null) {
            startPeriodButton.setText("Start Period");
            periodSelector.setValue(next);

            BaseConfig config = (BaseConfig) controller.configurator.getDefaultConfigs().get(periodSelector.getValue());
            if (!config.autostart) {
                autostartCheckbox.getModel().setSelected(false);
            }

            if (autostartCheckbox.getModel().isSelected()) {
                startPeriodButton.setEnabled(false);
                autostartTask = new AutostartTask();
                timer.scheduleAtFixedRate(autostartTask, 0, 1000);
            } else {
                startPeriodButton.setEnabled(true);
            }
        }
    }

    private void writePayoutsHeader() {
        try {
            BufferedWriter w = new BufferedWriter(new FileWriter("payouts.csv"));
            w.write("Period,");
            for (LocalClient client : clients.values()) {
                w.write(client.name);
                w.write(",");
                w.write(client.name + "(Total)");
                w.write(",");
            }
            w.newLine();
            w.close();
        } catch (IOException ex) {
            System.err.println("Error writing to payouts.csv");
        }
    }

    private void savePayouts() {
        try {
            if (!(new File("payouts.csv").exists())) {
                writePayoutsHeader();
            }
            BufferedWriter w = new BufferedWriter(new FileWriter("payouts.csv", true));
            w.write(periodSelector.getValue() + ",");
            for (LocalClient client : clients.values()) {
                w.write(String.valueOf(client.periodPoints));
                w.write(",");
                w.write(String.valueOf(client.totalPoints));
                w.write(",");
            }
            w.newLine();
            w.close();
        } catch (IOException ex) {
            System.err.println("Error writing to payouts.csv");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        periodControlPanel = new javax.swing.JPanel();
        periodSelector = new javax.swing.JSpinner();
        startPeriodButton = new javax.swing.JButton();
        endSessionButton = new javax.swing.JToggleButton();
        autostartCheckbox = new javax.swing.JCheckBox();
        secondsLeftLabel = new javax.swing.JLabel();
        clientControlPanel = new javax.swing.JPanel();
        clientListScrollPane = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList();
        removeButton = new javax.swing.JButton();
        payoutPanel = new javax.swing.JPanel();
        thresholdLabel = new javax.swing.JLabel();
        thresholdField = new javax.swing.JFormattedTextField();
        conversionLabel = new javax.swing.JLabel();
        showUpLabel = new javax.swing.JLabel();
        showUpField = new javax.swing.JFormattedTextField();
        payoutsButton = new javax.swing.JButton();
        conversionRateField = new javax.swing.JFormattedTextField();
        configPanel = new javax.swing.JPanel();
        loadPeriodConfigButton = new javax.swing.JButton();
        periodConfigFilenameField = new javax.swing.JTextField();
        configLoadIndicator = new javax.swing.JProgressBar();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setName("Control"); // NOI18N

        SpinnerNumberModel periodSelectorModel = new SpinnerNumberModel();
        periodSelectorModel.setMinimum(1);
        periodSelectorModel.setValue(1);
        periodSelector.setModel(periodSelectorModel);

        startPeriodButton.setText("Start Period");
        startPeriodButton.setEnabled(false);
        startPeriodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPeriodButtonActionPerformed(evt);
            }
        });

        endSessionButton.setText("End Session");
        endSessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endSessionButtonActionPerformed(evt);
            }
        });

        autostartCheckbox.setText("Autostart");
        autostartCheckbox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        autostartCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        autostartCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autostartCheckboxActionPerformed(evt);
            }
        });

        secondsLeftLabel.setText("Seconds Left:");

        org.jdesktop.layout.GroupLayout periodControlPanelLayout = new org.jdesktop.layout.GroupLayout(periodControlPanel);
        periodControlPanel.setLayout(periodControlPanelLayout);
        periodControlPanelLayout.setHorizontalGroup(
            periodControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(periodControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(periodControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(periodControlPanelLayout.createSequentialGroup()
                        .add(periodSelector, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(periodControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(periodControlPanelLayout.createSequentialGroup()
                                .add(5, 5, 5)
                                .add(periodControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(endSessionButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, autostartCheckbox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                            .add(startPeriodButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)))
                    .add(secondsLeftLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                .addContainerGap())
        );
        periodControlPanelLayout.setVerticalGroup(
            periodControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(periodControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(periodControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(startPeriodButton)
                    .add(periodSelector, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autostartCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(secondsLeftLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 174, Short.MAX_VALUE)
                .add(endSessionButton))
        );

        clientListScrollPane.setViewportView(clientList);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout clientControlPanelLayout = new org.jdesktop.layout.GroupLayout(clientControlPanel);
        clientControlPanel.setLayout(clientControlPanelLayout);
        clientControlPanelLayout.setHorizontalGroup(
            clientControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(removeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(clientListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        clientControlPanelLayout.setVerticalGroup(
            clientControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(clientControlPanelLayout.createSequentialGroup()
                .add(clientListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeButton)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        thresholdLabel.setText("Threshold (in points)");

        thresholdField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        thresholdField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        thresholdField.setText("0.00");

        conversionLabel.setText("Conversion (as rate)");

        showUpLabel.setText("Show-Up (in dollars)");

        showUpField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        showUpField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        showUpField.setText("5.00");

        payoutsButton.setText("Show Payouts Table");
        payoutsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payoutsButtonActionPerformed(evt);
            }
        });

        conversionRateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        conversionRateField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        conversionRateField.setText("1.0");

        org.jdesktop.layout.GroupLayout payoutPanelLayout = new org.jdesktop.layout.GroupLayout(payoutPanel);
        payoutPanel.setLayout(payoutPanelLayout);
        payoutPanelLayout.setHorizontalGroup(
            payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 783, Short.MAX_VALUE)
            .add(payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(payoutPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(payoutPanelLayout.createSequentialGroup()
                            .add(showUpLabel)
                            .add(24, 24, 24)
                            .add(thresholdLabel)
                            .add(24, 24, 24)
                            .add(conversionLabel))
                        .add(payoutPanelLayout.createSequentialGroup()
                            .add(34, 34, 34)
                            .add(showUpField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(93, 93, 93)
                            .add(thresholdField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(106, 106, 106)
                            .add(conversionRateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(75, 75, 75)
                            .add(payoutsButton)))
                    .addContainerGap(132, Short.MAX_VALUE)))
        );
        payoutPanelLayout.setVerticalGroup(
            payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 127, Short.MAX_VALUE)
            .add(payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(payoutPanelLayout.createSequentialGroup()
                    .add(16, 16, 16)
                    .add(payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(showUpLabel)
                        .add(thresholdLabel)
                        .add(conversionLabel))
                    .add(22, 22, 22)
                    .add(payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(payoutsButton)
                        .add(payoutPanelLayout.createSequentialGroup()
                            .add(1, 1, 1)
                            .add(payoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(showUpField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(thresholdField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(conversionRateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(41, Short.MAX_VALUE)))
        );

        loadPeriodConfigButton.setText("Load Period Config");
        loadPeriodConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPeriodConfigButtonActionPerformed(evt);
            }
        });

        periodConfigFilenameField.setEditable(false);

        org.jdesktop.layout.GroupLayout configPanelLayout = new org.jdesktop.layout.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configPanelLayout.createSequentialGroup()
                .add(loadPeriodConfigButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(periodConfigFilenameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(loadPeriodConfigButton)
                .add(periodConfigFilenameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        configLoadIndicator.setString("No Config Loaded");
        configLoadIndicator.setStringPainted(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(clientControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(periodControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(configPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(configLoadIndicator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 171, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(payoutPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(clientControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(periodControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(payoutPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(34, 34, 34)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(configPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(configLoadIndicator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startPeriodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPeriodButtonActionPerformed
        if (startPeriodButton.getText().equals("Start Period")) {
            if (controller.startPeriod((String) periodSelector.getValue())) {
                startPeriodButton.setText("End Period");
            }
        } else {
            controller.endPeriod();
            startPeriodButton.setText("Start Period");
        }
    }//GEN-LAST:event_startPeriodButtonActionPerformed

    private void loadPeriodConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPeriodConfigButtonActionPerformed
        final JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            final File file = fc.getSelectedFile();
            if (file != null && file.exists()) {
                startPeriodButton.setEnabled(false);
                configLoadIndicator.setIndeterminate(true);
                configLoadIndicator.setString("Loading Config...");
                periodConfigFilenameField.setText("");
                new SwingWorker<String, Void>() {

                    @Override
                    protected String doInBackground() throws Exception {
                        try {
                            controller.configurator.setConfigFile(file);
                        } catch (IOException ex) {
                            return "Error reading config file.";
                        }
                        try {
                            controller.loadConfig(controller.configurator);
                        } catch (BaseConfig.ConfigException ex) {
                            return ex.getMessage();
                        }
                        return "";
                    }

                    @Override
                    protected void done() {
                        try {
                            String errors = get();
                            if (errors.equals("")) {
                                configLoadIndicator.setString("Config Loaded");
                                periodConfigFilenameField.setText(file.getName());
                                List<String> periods = controller.getPeriods();
                                periods.add(null);
                                periodSelector.setModel(new SpinnerListModel(periods));
                                startPeriodButton.setEnabled(true);
                            } else {
                                Dialogs.popUpErr(errors);
                                configLoadIndicator.setString("Error Loading Config");
                            }
                        } catch (ExecutionException ex) {
                            Dialogs.popUpErr(ex);
                            configLoadIndicator.setString("Error Loading Config");
                        } catch (InterruptedException ex) {
                            Dialogs.popUpErr(ex);
                            configLoadIndicator.setString("Error Loading Config");
                        }
                        configLoadIndicator.setIndeterminate(false);
                    }
                }.execute();
            }
        }
    }//GEN-LAST:event_loadPeriodConfigButtonActionPerformed

    private void payoutsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payoutsButtonActionPerformed
        PayoutTable payoutTable = new PayoutTable(
                (Number) showUpField.getValue(),
                (Number) thresholdField.getValue(),
                (Number) conversionRateField.getValue(),
                clients.values());
        payoutTable.setVisible(true);
    }//GEN-LAST:event_payoutsButtonActionPerformed

    private void endSessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endSessionButtonActionPerformed
        EndSessionDialog endSessionDialog = new EndSessionDialog(null, true);
        if (endSessionDialog.getOK()) {
            if (controller.logger.queueSize() > 0) {
                LogWaitDialog logWaitDialog = new LogWaitDialog(null, true, controller.logger);
                logWaitDialog.setVisible(true);
                if (controller.logger.queueSize() > 0) {
                    System.err.println(String.format("WARNING: Dropping %d log events", controller.logger.queueSize()));
                }
            }
            controller.endSession();
            System.exit(0);
        }
        endSessionButton.getModel().setSelected(false);
    }//GEN-LAST:event_endSessionButtonActionPerformed

    private void autostartCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autostartCheckboxActionPerformed
        startPeriodButton.setEnabled(true);
        autostartCheckbox.setText("Autostart");
        if (autostartTask != null) {
            autostartTask.cancel();
        }
    }//GEN-LAST:event_autostartCheckboxActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (clientList.getSelectedValue() != null) {
            controller.unregister(((LocalClient) (clientList.getSelectedValue())).id);
        }
    }//GEN-LAST:event_removeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autostartCheckbox;
    private javax.swing.JPanel clientControlPanel;
    private javax.swing.JList clientList;
    private javax.swing.JScrollPane clientListScrollPane;
    private javax.swing.JProgressBar configLoadIndicator;
    private javax.swing.JPanel configPanel;
    private javax.swing.JLabel conversionLabel;
    private javax.swing.JFormattedTextField conversionRateField;
    private javax.swing.JToggleButton endSessionButton;
    private javax.swing.JButton loadPeriodConfigButton;
    private javax.swing.JPanel payoutPanel;
    private javax.swing.JButton payoutsButton;
    private javax.swing.JTextField periodConfigFilenameField;
    private javax.swing.JPanel periodControlPanel;
    private javax.swing.JSpinner periodSelector;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel secondsLeftLabel;
    private javax.swing.JFormattedTextField showUpField;
    private javax.swing.JLabel showUpLabel;
    private javax.swing.JButton startPeriodButton;
    private javax.swing.JFormattedTextField thresholdField;
    private javax.swing.JLabel thresholdLabel;
    // End of variables declaration//GEN-END:variables

    public static ControlPanel createControlPanel(ServerController controller) {
        ControlPanel controlPanel = new ControlPanel(controller);
        final JFrame frame = new JFrame();
        frame.add(controlPanel);
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        Dimension size = controlPanel.getPreferredSize();
        frame.setSize(size.width, size.height + 25);
        frame.setVisible(true);
        frame.setTitle("Control");
        if (System.getProperty("fire.debug") != null) {
            frame.setAlwaysOnTop(true);
            frame.addWindowFocusListener(new AutoFocusListener(frame));
        }
        return controlPanel;
    }

    private static class AutoFocusListener implements WindowFocusListener {

        private int i;
        private JFrame frame;

        public AutoFocusListener(JFrame frame) {
            i = 0;
            this.frame = frame;
        }

        public void windowGainedFocus(WindowEvent we) {
            if (i >= 1) {
                frame.setAlwaysOnTop(false);
                frame.removeWindowFocusListener(this);
            }
            i++;
        }

        public void windowLostFocus(WindowEvent we) {
        }
    }

    private class AutostartTask extends TimerTask {

        private int n = 0;

        @Override
        public void run() {
            if (n++ == 10) {
                startPeriodButtonActionPerformed(null);
                autostartCheckbox.setText("Autostart");
                cancel();
            } else {
                autostartCheckbox.setText(String.format("%d", 10 - n));
            }
        }
    }

    private class CountdownTask extends TimerTask {

        private int secondsLeft;

        public CountdownTask(int secondsLeft) {
            this.secondsLeft = secondsLeft;
        }

        @Override
        public void run() {
            if (secondsLeft == 0) {
                cancel();
            } else {
                secondsLeft--;
                secondsLeftLabel.setText("Seconds Left: " + secondsLeft);
            }
        }
    }
}
